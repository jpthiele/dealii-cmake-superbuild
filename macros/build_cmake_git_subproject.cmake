macro(build_cmake_git_subproject)
  # See cmake_parse_arguments docs to see how args get parsed here:
  #    https://cmake.org/cmake/help/latest/command/cmake_parse_arguments.html
  set(oneValueArgs NAME VERSION GIT_REPO GIT_TAG DOWNLOAD_ONLY DOWNLOAD_AND_CONFIGURE)
  set(multiValueArgs BUILD_ARGS DEPENDS_ON)
  cmake_parse_arguments(BUILD_SUBPROJECT "" "${oneValueArgs}"
                        "${multiValueArgs}" ${ARGN})

  # Setup SUBPROJECT_* variables (containing paths) for this function
  setup_subproject_path_vars(${BUILD_SUBPROJECT_NAME})

  #Git tags are not always consistent, so prefer version
  if (NOT DEFINED BUILD_SUBPROJECT_VERSION)
    if (NOT DEFINED BUILD_SUBPROJECT_GIT_TAG)  
      set(SUBPROJECT_INSTALL_PATH ${CMAKE_INSTALL_PREFIX})
    else()
      set(SUBPROJECT_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/${BUILD_SUBPROJECT_NAME}-${BUILD_SUBPROJECT_GIT_TAG})
    endif()
  else ()
    if(BUILD_SUBPROJECT_VERSION STREQUAL "in_name")
      set(SUBPROJECT_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/${BUILD_SUBPROJECT_NAME})
    else()
      set(SUBPROJECT_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/${BUILD_SUBPROJECT_NAME}-${BUILD_SUBPROJECT_VERSION})
    endif()
  endif()
  
  
  set(SUBPROJECT_BUILD_COMMAND ${DEFAULT_BUILD_COMMAND})
  set(SUBPROJECT_CONFIGURE_COMMAND ${DEFAULT_CONFIGURE_COMMAND})
  
  if(BUILD_SUBPROJECT_DOWNLOAD_ONLY)
    if(NOT DEFINED BUILD_SUBPROJECT_DOWNLOAD_AND_CONFIGURE)
      set(SUBPROJECT_CONFIGURE_COMMAND true)
    endif()
    set(SUBPROJECT_BUILD_COMMAND true) 
    set(BUILD_SUBPROJECT_INSTALL_COMMAND true)
  endif()

  
  # Build the actual subproject
  ExternalProject_Add(${SUBPROJECT_NAME}
    CONFIGURE_COMMAND ${SUBPROJECT_CONFIGURE_COMMAND}
    BUILD_COMMAND ${BUILD_SUBPROJECT_INSTALL_COMMAND}
    INSTALL_COMMAND ${SUBPROJECT_INSTALL_COMMAND}
    BUILD_ALWAYS OFF
    PREFIX ${SUBPROJECT_NAME}
    DOWNLOAD_DIR ${SUBPROJECT_NAME}
    STAMP_DIR ${SUBPROJECT_STAMP_PATH}
    SOURCE_DIR ${SUBPROJECT_SOURCE_PATH}
    BINARY_DIR ${SUBPROJECT_BUILD_PATH}
    INSTALL_DIR ${SUBPROJECT_INSTALL_PATH}
    GIT_REPOSITORY ${BUILD_SUBPROJECT_GIT_REPO}
    GIT_TAG ${BUILD_SUBPROJECT_GIT_TAG}
    LIST_SEPARATOR | # Use the alternate list separator
    CMAKE_ARGS
      -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -DCMAKE_INSTALL_PREFIX=${SUBPROJECT_INSTALL_PATH}
      -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}
      -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}
      -DCMAKE_INSTALL_DOCDIR=${CMAKE_INSTALL_DOCDIR}
      -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}
      -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
      ${BUILD_SUBPROJECT_BUILD_ARGS}
  )

  if(BUILD_SUBPROJECT_DEPENDS_ON)
    ExternalProject_Add_StepDependencies(${SUBPROJECT_NAME}
      configure ${BUILD_SUBPROJECT_DEPENDS_ON}
    )
  endif()
  
  set(${BUILD_SUBPROJECT_NAME}_DIR ${SUBPROJECT_INSTALL_PATH})
endmacro()
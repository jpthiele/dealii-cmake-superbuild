macro(set_packages_and_dependencies)
  #Set some installs to false by default to make sure all ifs are correct
  set(INSTALL_amd_blis FALSE) 
  set(INSTALL_mumps FALSE) 
  set(INSTALL_openblas FALSE) 
  set(INSTALL_superlu_dist FALSE) 
  set(INSTALL_trilinos FALSE) 
  
  #set INSTALL_<package_name> to TRUE
  foreach(arg ${INSTALL_TPLS})
    set(INSTALL_${arg} TRUE)
  endforeach()
  
  #Check for non optional BLAS dependencies here!
  if(${INSTALL_mumps} OR ${INSTALL_superlu_dist} OR ${INSTALL_trilinos})
    if (NOT ${INSTALL_some_blas} OR ${INSTALL_some_blas} STREQUAL "")
      set(INSTALL_some_blas TRUE)
    endif()
  endif()
  
  
  if(FORCE_USE_OF_OPENBLAS)
    set(INSTALL_openblas TRUE)
  else()
    if(CPU_VENDOR_ID STREQUAL GenuineIntel)
      message("\nAs this is an Intel processor, looking for IntelMKL")
      set(BLA_VENDOR Intel10_64_dyn)
      find_package(BLAS)
      if(BLAS_FOUND)#AND LAPACK_FOUND)
        set(BLAS_TYPE "IntelMKL")
        list(GET BLAS_LIBRARIES 0 TMPVAR)
        string(REPLACE "/lib/" ";" TMPLIST ${TMPVAR})
        list(GET TMPLIST 0 MKL_ROOT)
        message("\nFound IntelMKL at")
        print(MKL_ROOT)
        message("For a manufacturer independent build call cmake again with the added option")
        message("\t-D FORCE_USE_OF_OPENBLAS=ON\n")
        unset(TMPLIST)
        set(BLAS_LIBS ${TMPVAR})
        unset(TMPVAR)
        set(LAPACK_LIBS ${BLAS_LIBS})
        list(APPEND DEALII_CONFOPTS "-D LAPACK_DIR=${MKL_ROOT}")
        list(APPEND DEALII_CONFOPTS "-D DEAL_II_WITH_SCALAPACK:BOOL=OFF")
      else()
        message(WARNING "IntelMKL not found!")
        message("  If installed source MKLROOT/bin/mklvars.sh intel64 and rerun configure.")
        message("  Otherwise, OpenBLAS will be setup for installation now.")
        set(INSTALL_openblas TRUE)
        set(BLAS_Fortran_FLAGS "")
        set(BLAS_C_FLAGS "")
      endif()
    endif()
  endif()
  
  message("checking for non optional package dependencies")
    
  if(${INSTALL_openblas})
    set(BLAS_TYPE "OpenBLAS")
    message("\tScaLAPACK not provided by OpenBlas, installing Reference ScaLAPACK")
    set(INSTALL_reference_scalapack TRUE) 
    set(INSTALL_scalapack TRUE)
  endif()
  
  if (${INSTALL_amd_blis})
    set(BLAS_TYPE "AMDBlis")
    message("\tScaLAPACK not provided by AMD Blis, installing AMD optimized ScaLAPACK")
    set(INSTALL_amd_scalapack TRUE)
    set(INSTALL_scalapack TRUE)
  endif()
  
  if(${INSTALL_mumps} OR ${INSTALL_superlu_dist} OR ${INSTALL_trilinos})
    if (NOT ${INSTALL_parmetis} OR ${INSTALL_parmetis} STREQUAL "")
      message("\tParMetis needed by downstream packages, switched on")
      set(INSTALL_parmetis TRUE)
    endif()
  endif()
  
endmacro()